'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* global HTMLCS, document */
/* eslint-disable no-console */
/*eslint no-unused-vars: 0*/

var output = function output(msg) {
  var typeName = 'UNKNOWN';

  switch (msg.type) {
    case HTMLCS.ERROR:
      {
        typeName = 'ERROR';
        break;
      }
    case HTMLCS.WARNING:
      {
        typeName = 'WARNING';
        break;
      }

    case HTMLCS.NOTICE:
      {
        typeName = 'NOTICE';
        break;
      }
  }

  var element = msg.element;
  var message = [typeName, msg.code, msg.msg, element.outerHTML, element.className, element.id].join('|');

  console.log(message);

  return message;
};

var Runner = function () {
  function Runner(options) {
    _classCallCheck(this, Runner);
  }

  _createClass(Runner, [{
    key: 'run',
    value: function run(standard) {
      var _this = this;

      var messages = [];

      // At the moment, it passes the whole DOM document.
      HTMLCS.process(standard, document, function () {
        messages = HTMLCS.getMessages();
        messages = messages.map(function (message) {
          return output(message);
        }, _this);
        console.log('done');
      });

      return messages;
    }
  }]);

  return Runner;
}();

var HTMLCS_RUNNER = new Runner();