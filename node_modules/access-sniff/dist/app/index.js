'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _testRunner = require('./testRunner');

var _testRunner2 = _interopRequireDefault(_testRunner);

var _createErrorMessage = require('./createErrorMessage');

var _createErrorMessage2 = _interopRequireDefault(_createErrorMessage);

var _helpers = require('../helpers');

var _defaults = require('../helpers/defaults');

var _defaults2 = _interopRequireDefault(_defaults);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Accessibility = function () {
  function Accessibility(options) {
    _classCallCheck(this, Accessibility);

    // Merge defaults with options
    _underscore2.default.defaults(options, _defaults2.default);

    options.reportLevelsArray = (0, _helpers.GenerateReportLevels)(options.reportLevels);

    // Assign options to this
    this.options = options;
  }

  _createClass(Accessibility, [{
    key: 'run',
    value: function run(filesInput) {
      var _this = this;

      var files = _bluebird2.default.resolve(filesInput);
      var verbose = this.options.verbose;


      if (this.options.verbose) {
        _logger2.default.startMessage('Starting Accessibility tests');
      }

      return files.bind(this).mapSeries(function (file) {
        return (0, _testRunner2.default)(file, _this.options);
      }, { concurrency: 1 }).then(function (reports) {
        return (0, _helpers.CreateReportsJson)(reports);
      }).then(function (_ref) {
        var reportLogs = _ref.reportLogs,
            totalIssueCount = _ref.totalIssueCount,
            AllReportsLintFree = _ref.AllReportsLintFree;

        var errorMessage = (0, _createErrorMessage2.default)(totalIssueCount);

        if (AllReportsLintFree) {
          _logger2.default.lintFree(filesInput.length);
        }

        if (totalIssueCount.error && verbose) {
          _logger2.default.generalError(errorMessage);
        }

        if (!_this.options.force && totalIssueCount.error) {
          return _bluebird2.default.reject({
            errorMessage: errorMessage,
            reportLogs: reportLogs
          });
        }

        return reportLogs;
      });
    }
  }]);

  return Accessibility;
}();

exports.default = Accessibility;